#!/usr/bin/env python
"""
The CLI for teh stiny library. Provides the basic creation, valiation, deletion and listing if tiny urls. Also \
provides configuration and bootstrapping.
"""

__doc__ = """
Stiny - TinyURLs for Static Storage

Usage:
  stiny new (<url>) [<name>] [--config=<config>]
  stiny validate (<url>) (<name>) [--config=<config>]
  stiny rm (<name>) [--config=<config>]
  stiny list [--config=<config>]
  stiny configure [--config=<config>] [--read]


Options:
  -h --help              Show this screen.
  -c --config=<config>   Path to configuration file [Default: ~/.stiny/stiny.cfg]
  -r --read              Show the contents of the config
"""

from os.path import expanduser, exists
from urlparse import urlparse
from sys import exit

import docopt

from stiny.controllers import get_controller
from stiny.url import URL
from stiny.exceptions import InvalidTinyTextException, InvalidURLException, \
    MalformedTemplateConfig, TemplateNotFoundException, UnsupportedStorageTypeException, UnknownConfigError, \
    ConfigNotFoundError, UnableToAutogenerateTinyText, TinyURLExistsException, TinyUrlDoesNotExistException
from stiny.configuration import StinyConfiguration, MultipleInvalid


TINY_FORMAT = "http://{domain}/{tiny}"


def main():
    """
    Handles setting up parameters from DOCOPT, calling functions based on parameters.
    Also handles error-exit conditions from exceptions thrown by library.
    :return:
    """
    # noinspection PyPep8
    try:
        args = docopt.docopt(__doc__)

        # opening config file
        config_path = expanduser(args['--config'])

        if args['configure'] and not args['--read']:
            configure(config_path)
        else:
            config = get_configuration(config_path)

            # getting storage controller
            controller = get_controller(config)

            # getting tiny parameters
            domain = config.get('main', 'root_domain_name')
            url = args['<url>']

            if args['<name>']:
                tiny_text = urlparse(args['<name>']).path.strip('/')
            else:
                tiny_text = None

            if args['new']:
                new(controller, url, tiny_text, domain)
            elif args['validate']:
                validate(controller, url, tiny_text, domain)
            elif args['rm']:
                rm(controller, tiny_text, domain)
            elif args['list']:
                list_(controller, domain)
            elif args['configure'] and args['--read']:
                print_config(config)

    # Failure to parse parameters
    except docopt.DocoptExit as e:
        print("ERROR: Insufficient or incorrect paramters supplied.")
        print(e.message)
        exit(1)

    except (InvalidTinyTextException,  # If the tiny text provided is not valid
            InvalidURLException,  # If the url provided is not valid
            MalformedTemplateConfig,  # If the template config value does not begin with CANNED: or FILE:
            TemplateNotFoundException,  # If the provided template config cannot be found
            TinyUrlDoesNotExistException,  # If we try to delete a tinyurl does not exist
            TinyURLExistsException,  # If we try to overwrite a tiny that does exist and have not specified overwrite
            UnableToAutogenerateTinyText,  # If we get too many collisions when auto-generating the tiny text
    ) as e:
        print("ERROR:" + e.message)
        exit(2)

    # These crop up in the event of issues in the config file
    except (MultipleInvalid,  # Config schema failed to validate
            UnknownConfigError,  # There are missing config values that are not required in the schema
            UnsupportedStorageTypeException,  # The storage type set is not implemented
            ConfigNotFoundError  # The config file cannot be found
    ) as e:
        print("CONFIG ERROR: {}".format(e.message))
        exit(3)

    # # Unhandled exception
    except Exception as e:
        print("CRITICAL ERROR - UNHANDLED TERMINATION")
        print(repr(e))
        exit(99)


def new(controller, url, tiny_text, domain):
    """
    Handles creating a new URL
    :param controller: The controller object for the configured storage
    :param url: The url to link to
    :param tiny_text: The tiny_text, if provided
    :param domain: The root domain
    """
    surl = URL(url, tiny_text)
    controller.put(surl)
    tiny_link = TINY_FORMAT.format(domain=domain,
                                   tiny=surl.get_tiny_uri())
    print("Tiny link {tiny} to {url} created.".format(tiny=tiny_link, url=surl.url))


def validate(controller, url, tiny_text, domain):
    """
    Handles validating an existing url
    :param controller: The controller object for the configured storage
    :param url: The url to link to
    :param tiny_text: The tiny_text, if provided
    :param domain: The root domain
    """
    surl = URL(url, tiny_text)
    tiny_link = TINY_FORMAT.format(domain=domain, tiny=surl.get_tiny_uri())
    if controller.validate(surl):
        print("Tiny link {tiny} is valid.".format(tiny=tiny_link))
    else:
        print("Tiny link {tiny} is NOT valid.".format(tiny=tiny_link))


def rm(controller, tiny_text, domain):
    """
    Handles deleting an existing url
    :param controller: The controller object for the configured storage
    :param tiny_text: The tiny_text
    :param domain: The root domain
    """
    controller.delete(tiny_text)
    tiny_link = TINY_FORMAT.format(domain=domain, tiny=tiny_text)
    print("Tiny link {tiny} deleted.".format(tiny=tiny_link))


def list_(controller, domain):
    """
    Handles print a time-sotred list of existing urls
    :param controller: The controller object for the configured storage
    :param domain: The root domain
    """
    format_line = "{:<28}{:<27}{:<167}"
    print(format_line.format("Create Date", "Tiny URL", "Long URL"))
    print(format_line.format("-" * 26, "-" * 25, "-" * 165))

    for surl in sorted(controller.list(), key=lambda x: x.last_modified):
        print(format_line.format(surl.last_modified.strftime("%a, %d %b %Y %H:%M:%S %Z"),
                                 TINY_FORMAT.format(domain=domain, tiny=surl.get_tiny_uri()),
                                 surl.url))


def get_configuration(config_path):
    if not exists(config_path):
        raise (ConfigNotFoundError("The configuration file ({}) could not be found!".format(config_path)))
    else:
        with open(config_path) as f:
            config = StinyConfiguration(f)
        return config


def configure(config_path):
    if exists(config_path):
        config = get_configuration(config_path)
    else:
        config = None

    new_config = StinyConfiguration(None)

    print("Configuring Stiny...")

    for section in new_config.sections():
        if section == 'main' or user_confirm("Configure Section {section}?".format(section=section)):
            print("\tSection {}:".format(section))
            for option in new_config.options(section):
                default = config.get(section, option) if config and config.has(section, option) else None
                input_ = raw_input("\t\t{} [{}]: ".format(option, default))
                if input_ == "":
                    new_config.set(section, option, default)
                else:
                    new_config.set(section, option, input_)

    if user_confirm("Write Configuration?"):
        with open(config_path, 'w') as f:
            # noinspection PyTypeChecker
            new_config.write(f)


def print_config(config):
    """
    Handles printing the current configuration
    :param config: The StinyConfiguration object
    """
    for section in config.sections():
        print(section)
        for option in config.options(section):
            print("\t{option} : {value}".format(option=option, value=config.get(section, option)))


def user_confirm(prompt):
    answer = ''
    while answer.upper() not in ['Y', 'N']:
        answer = raw_input(prompt + " (Y/N):").upper()
    return answer == 'Y'


if __name__ == '__main__':
    main()
